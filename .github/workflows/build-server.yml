name: Server CI

on:
  push:
    branches: [main]
    paths:
      - 'server/**'
  pull_request:
    paths:
      - 'server/**'
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version (e.g., 3.11, 3.12)'
        required: false
        default: '3.11'
      start-target:
        description: 'Uvicorn target (module:app), e.g., app.main:app'
        required: false
        default: 'app.main:app'
      probe-path:
        description: 'HTTP path to probe after boot (/, /health, etc.)'
        required: false
        default: '/'

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version || '3.11' }}

      - name: Cache Poetry install
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-1.8.3-0

      - uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-prefer-active-python: true

      - name: Show tool versions
        run: |
          python --version
          poetry --version

      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: server/.venv
          key: pydeps-${{ hashFiles('server/poetry.lock') }}

      - name: Install deps (no root)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Poetry metadata check
        run: poetry check

      - name: Byte-compile all Python files (fail on syntax errors)
        run: |
          python - <<'PY'
          import pathlib, py_compile, sys
          files = [p for p in pathlib.Path('.').rglob('*.py')]
          for f in files:
              py_compile.compile(str(f), doraise=True)
          print(f"Byte-compiled {len(files)} files successfully")
          PY

      - name: Smoke-boot application with Uvicorn
        env:
          START_TARGET: ${{ inputs.start-target || 'app.main:app' }}
          PROBE_PATH:   ${{ inputs.probe-path   || '/' }}
        run: |
          # Start server in background on a non-default port
